#!/usr/bin/env python3
#-*- coding:utf-8 -*-

"""
xor strings
options:
    -s  -  string with \\xAF escapes
    -r  -  raw string
    -h  -  hex-encoded string (non-letterdigit chars are stripped)
    -f  -  read data from file (- for stdin)

    --newline -  newline at the end (default)
    -n / --no-newline -  no newline at the end
    --cycle - do not pad (default)
    --no-cycle / --nc  -  pad smaller strings with null bytes
example: xor -s lol -h 414243 -f /etc/passwd

author: hellman ( hellman1908@gmail.com )
"""

import getopt
import string
import sys


HEXES = set("0123456789abcdefABCDEF")


def main():
    cycle = True
    newline = True
    try:
        opts, _ = getopt.getopt(
            sys.argv[1:], "ns:r:h:f:",
            ["cycle", "no-cycle", "nc", "no-newline", "newline"])
        datas = []
        for c, val in opts:
            if c == "--cycle":
                cycle = True
            elif c in ("--no-cycle", "--nc"):
                cycle = False
            elif c == "--newline":
                newline = True
            elif c in ("-n", "--no-newline"):
                newline = False
            else:
                datas.append(arg_data(c, val))
        if not datas:
            raise getopt.GetoptError("no data given")
    except getopt.GetoptError as e:
        print("error:", e, file=sys.stderr)
        print(__doc__, file=sys.stderr)
        quit()

    sys.stdout.buffer.write(xor(datas, cycle=cycle))
    if newline:
        sys.stdout.buffer.write(b"\n")


def xor(args, cycle=True):
    # Sort by len DESC
    args.sort(key=len, reverse=True)
    res = bytearray(args.pop(0))
    maxlen = len(res)

    for s in args:
        slen = len(s)
        for i in range(maxlen if cycle else slen):
            res[i] ^= s[i % slen]
    return res


def from_str(s):
    res = []
    i = 0
    while True:
        if i + 4 > len(s):
            break

        if s[i] == "\\" and s[i+1] == "x" and s[i+2] in HEXES and s[i+3] in HEXES:
            res.append(int(s[i+2:i+4], 16))
            i += 4
        else:
            res.append(ord(s[i]))
            i += 1
    res += s[i:].encode("ascii")
    return bytes(res)


def from_file(s):
    if s == "-":
        s = sys.stdin.fileno()
    return open(s, "rb").read()


def arg_data(opt, s):
    if opt == "-s":
        return from_str(s)
    elif opt == "-r":
        return str.encode(s)
    elif opt == "-h":
        return bytes.fromhex(s)
    elif opt == "-f":
        return from_file(s)
    raise getopt.GetoptError("unknown option -%s" % opt)


if __name__ == '__main__':
    main()
